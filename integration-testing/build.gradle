import org.jetbrains.kotlin.gradle.plugin.KotlinPlatformType

/*
 * Copyright 2016-2020 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license.
 */

apply from: rootProject.file("gradle/compile-jvm.gradle")

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    npmTest {
        kotlin
        compileClasspath += sourceSets.test.runtimeClasspath
        runtimeClasspath += sourceSets.test.runtimeClasspath
    }
}

def jvmCompilerAttr = Attribute.of('org.jetbrains.kotlin.jvm.compiler', String)

task npmTest(type: Test) {
    def sourceSet = sourceSets.npmTest
    environment "projectRoot", project.rootDir
    environment "deployVersion", version
    def dryRunNpm = project.properties['dryRun']
    def doRun = dryRunNpm == "true" // so that we don't accidentally publish anything, especially before the test
    onlyIf { doRun }
    if (doRun) { // `onlyIf` only affects execution of the task, not the dependency subtree
        dependsOn(project(':').getTasksByName("publishNpm", true))
    }
    testClassesDirs = sourceSet.output.classesDirs
    classpath = sourceSet.runtimeClasspath
}

dependencies {
    attributesSchema {
        attribute(jvmCompilerAttr)
    }
    testCompile "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    testCompile 'junit:junit:4.12'
    npmTestCompile 'org.apache.commons:commons-compress:1.18'
    npmTestCompile 'com.google.code.gson:gson:2.8.5'
}

['legacy', 'ir'].forEach { jvmCompilerType ->
    sourceSets {
        "mavenTest${jvmCompilerType.capitalize()}" {
            kotlin.srcDirs = ["src/mavenTest/kotlin"]
            compileClasspath += sourceSets.test.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
        "debugAgentTest${jvmCompilerType.capitalize()}" {
            kotlin.srcDirs = ["src/debugAgentTest/kotlin"]
            compileClasspath += sourceSets.test.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }

        "coreAgentTest${jvmCompilerType.capitalize()}" {
            kotlin.srcDirs = ["src/coreAgentTest/kotlin"]
            compileClasspath += sourceSets.test.runtimeClasspath
            runtimeClasspath += sourceSets.test.runtimeClasspath
        }
    }

    tasks.register("mavenTest${jvmCompilerType.capitalize()}", Test) {
        def sourceSet = sourceSets.getByName("mavenTest${jvmCompilerType.capitalize()}")
        dependsOn(project(':').getTasksByName("publishToMavenLocal", true))
        testClassesDirs = sourceSet.output.classesDirs
        classpath = sourceSet.runtimeClasspath
        // we can't depend on the subprojects because we need to test the classfiles that are published in the end.
        // also, we can't put this in the `dependencies` block because the resolution would happen before publication.
        def mavenTestClasspathConfiguration = project.configurations.detachedConfiguration(
                project.dependencies.create("org.jetbrains.kotlinx:kotlinx-coroutines-core:$version"),
                project.dependencies.create("org.jetbrains.kotlinx:kotlinx-coroutines-android:$version"))

        mavenTestClasspathConfiguration.attributes {
            attribute(KotlinPlatformType.attribute, KotlinPlatformType.jvm)
            attribute(jvmCompilerAttr, jvmCompilerType)
        }

        classpath += mavenTestClasspathConfiguration
    }

    tasks.register("debugAgentTest${jvmCompilerType.capitalize()}", Test) {
        def sourceSet = sourceSets.getByName("debugAgentTest${jvmCompilerType.capitalize()}")
        def jarProp = jvmCompilerType == 'ir' ? 'shadowJvmIrJar' : 'shadowJvmJar'
        dependsOn(project(':kotlinx-coroutines-debug')[jarProp])
        jvmArgs('-javaagent:' + project(':kotlinx-coroutines-debug')[jarProp].outputs.files.getFiles()[0])
        testClassesDirs = sourceSet.output.classesDirs
        classpath = sourceSet.runtimeClasspath
    }

    tasks.register("coreAgentTest${jvmCompilerType.capitalize()}", Test) {
        def sourceSet = sourceSets.getByName("coreAgentTest${jvmCompilerType.capitalize()}")
        def jarProp = jvmCompilerType == 'ir' ? 'jvmIrJar' : 'jvmJar'
        dependsOn(project(':kotlinx-coroutines-core')[jarProp])
        jvmArgs('-javaagent:' + project(':kotlinx-coroutines-core')[jarProp].outputs.files.getFiles()[0])
        testClassesDirs = sourceSet.output.classesDirs
        classpath = sourceSet.runtimeClasspath
    }

    configurations {
        def confNames = [
                "debugAgentTest${jvmCompilerType.capitalize()}RuntimeClasspath",
                "debugAgentTest${jvmCompilerType.capitalize()}CompileClasspath",
                "coreAgentTest${jvmCompilerType.capitalize()}RuntimeClasspath",
                "coreAgentTest${jvmCompilerType.capitalize()}CompileClasspath"
        ]
        configure(confNames.collect { getByName(it) }) {
            attributes {
                attribute(jvmCompilerAttr, jvmCompilerType)
            }
        }
    }

    "compileCoreAgentTest${jvmCompilerType.capitalize()}Kotlin" {
        kotlinOptions {
            freeCompilerArgs += ["-Xallow-jvm-ir-dependencies"]
        }
    }

    "compileDebugAgentTest${jvmCompilerType.capitalize()}Kotlin" {
        kotlinOptions {
            freeCompilerArgs += ["-Xallow-kotlin-package", "-Xallow-jvm-ir-dependencies"]
        }
    }

    dependencies {
        "debugAgentTest${jvmCompilerType.capitalize()}Compile" project(':kotlinx-coroutines-core')
        "debugAgentTest${jvmCompilerType.capitalize()}Compile" project(':kotlinx-coroutines-debug')
        "coreAgentTest${jvmCompilerType.capitalize()}Compile" project(':kotlinx-coroutines-core')
    }

    check {
        dependsOn(["mavenTest${jvmCompilerType.capitalize()}", "debugAgentTest${jvmCompilerType.capitalize()}", "coreAgentTest${jvmCompilerType.capitalize()}"])
    }
}

check {
    dependsOn("npmTest")
}
